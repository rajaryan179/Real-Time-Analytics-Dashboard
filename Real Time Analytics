use actix_web::{web, App, HttpServer, Responder, HttpRequest};
use actix_web_actors::ws;

struct WebSocketSession;

impl actix::Actor for WebSocketSession {
    type Context = ws::WebsocketContext<Self>;
}

impl ws::StreamHandler<Result<ws::Message, ws::ProtocolError>> for WebSocketSession {
    fn handle(&mut self, msg: Result<ws::Message, ws::ProtocolError>, ctx: &mut Self::Context) {
        match msg {
            Ok(ws::Message::Ping(msg)) => ctx.pong(&msg),
            Ok(ws::Message::Text(text)) => {
                ctx.text(format!("Real-time system metrics: {}", text));
            }
            _ => (),
        }
    }
}

async fn websocket_handler(req: HttpRequest, stream: web::Payload) -> impl Responder {
    ws::start(WebSocketSession {}, &req, stream)
}

#[actix_rt::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/ws/", web::get().to(websocket_handler))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
